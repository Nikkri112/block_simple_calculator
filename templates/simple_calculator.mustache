{{!
    This is the mustache for the time block simple calculator.
    @template block_simple_calculator/simple_calculator
    This template renders the entire block content.
}}
<script src="https://cdn.plot.ly/plotly-2.32.0.min.js" charset="utf-8"></script>
<div class="block-calculator" style = 'flex-wrap:wrap;align-items:center'>
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#exampleModal">
        Открыть побольше
    </button>
    <div id='attention' style='display:none'></div>
    <div id="tester" style = 'width:100%'></div>
    <div class="modal" tabindex="-1" id="exampleModal" data-backdrop="true">
        <div class="modal-dialog modal-lg w-75">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Цифровые компетенции</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="false">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="d-flex justify-content-between">
                        <div id="ddown"></div>
                        <div id="attemptcounter"></div>
                    </div>
                    <div id="altTester"></div>  
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Закрыть</button>
                <div>
            </div>
        </div>
    </div>
</div>
    {{#js}}
    modalNode = document.getElementById('exampleModal')
    document.getElementById('exampleModal').remove()
    attentionDiv = document.getElementById('attention')
    results = {{{results}}}
    resultArray = results.resultarray
    console.log(resultArray)
	respResultArray = results.responsearray
	console.log(respResultArray)
    

    function dataObjectCreate(year,array,name='',lining='solid',myopacity=0.6,mynamesarray){  
        if(name==''){
            name = year
        }
        obj={
                type: 'scatterpolar',
                r: array,
                theta:mynamesarray,
                fill: 'toself',
                name: name,
                opacity: myopacity,
                hovertemplate:'%{r}%',
                zorder: 0,
                line:{
                    dash:lining,
                }
            } 
        return(obj)
    }

    function onlyUnique(value, index, array) {
        return array.indexOf(value) === index;
    }
    function createTraces(resArray){
        yearsArray = []
        tracesArray = []
        namesArray = []
        lastQuizDone = false

        for(let i=0;i<resArray.length;i++){
            yearsArray.push(parseInt(resArray[i].year))
        }
        yearsArray = yearsArray.filter(onlyUnique)

        for(let i=0;i<resArray.length;i++){
            namesArray.push(resArray[i].testName)
        }
        namesArray = namesArray.filter(onlyUnique)

        for(let i=0;i<yearsArray.length;i++){
            triedThisYear = false
            newArray = []
            newNamesArray = []
            averageArray = []
            for(let j=0;j<resArray.length;j++){
                if(resArray[j].year == yearsArray[i]){            
                    newArray.push(resArray[j].finalGrade)
                    newNamesArray.push(resArray[j].testName)
                    averageArray.push(resArray[j].averageGrade)
                    if(resArray[j].tried){
                        triedThisYear = true
                        }
                    }
                }
            newNamesArray.push(newNamesArray[0])
            if(yearsArray[i]==Math.max(...yearsArray)){
                averageArray.push(averageArray[0])
                tracesArray.push(dataObjectCreate(yearsArray[i],averageArray,'Среднее','dash',0.7,mynamesarray=newNamesArray))
            }
            else{
                if(triedThisYear){
                    averageArray.push(averageArray[0])
                    tracesArray.push(dataObjectCreate(yearsArray[i],averageArray,`Среднее ${yearsArray[i]}`,'dash',0.7,mynamesarray=newNamesArray))
                    console.log(averageArray)
                }
            }
            if(triedThisYear && newArray.length==namesArray.length){
                newArray.push(newArray[0])
                averageArray.push(averageArray[0])
                if(yearsArray[i]==Math.max(...yearsArray)){
                    tracesArray.push(dataObjectCreate(yearsArray[i],newArray,'Личный результат','solid',1,mynamesarray=newNamesArray))
                    }
                else{
                    tracesArray.push(dataObjectCreate(yearsArray[i],newArray,'','solid',0.7,mynamesarray=newNamesArray))
                    }
                }    
            }
        return tracesArray
    }

    mytracesArray = createTraces(resultArray)
    responses = []
    attcounter = []
    newattcounter = 0
    resultArray.forEach((obj)=>{
        newattcounter+=obj.attemptcounter
    })
    attcounter.push(newattcounter)
    for(let i=0;i<respResultArray.length;i++){
        responses.push(respResultArray[i].response)
    }
    responses = responses.filter(onlyUnique)
    responsesdata = []
	console.log(responses)
    for(let i = 0;i<responses.length;i++){
        newattcounter = 0
        newArray = []
        for(let j=0;j<respResultArray.length;j++){
            if(respResultArray[j].response==responses[i]){
                newArray.push(respResultArray[j])
                newattcounter = newattcounter+respResultArray[j].attemptcounter
            }
        }
        responsesdata.push(newArray)
        attcounter.push(newattcounter)
    }
    console.log(attcounter)
    console.log(responsesdata)
    choicesArray = []
    choicesArray.push(mytracesArray)
    responsesdata.forEach((obj)=>{
        choicesArray.push(createTraces(obj))
    })
    console.log(choicesArray)
    
	TESTER = document.getElementById('tester');
    function datacreate(tracearray){
        this.data = []
            layout = {
                legend:{
                    orientation:'h',
                    tracegroupgap:0,
                    itemwidth:20,
                    entrywidthmode:'pixels',
                },
                margin:{
                    b:0,
                    l:20,
                    r:20,
                    t:30
                },
                autosize:true,
                dragmode:false,
                polar: {
                    radialaxis: {
                    visible: true,
                    range: [0, 100],
                    tick0:0,
                    dtick:25,
                    tickmode:'linear',
                    ticklabelstep:2,
                    title:{
                        color:'#db0f0f',
                    }
                    }
            },
            showlegend: true,
            }
        tracearray.forEach((obj)=>this.data.push(obj))
        return this.data
    }
        document.getElementById("page").appendChild(modalNode)

        dropdownSlot = document.getElementById('ddown')
        console.log(document.getElementById('ddown'))

        dropdown = document.createElement('select')
        defaultOption = new Option("Общие результаты", 0)
        defaultOption.setAttribute('selected','selected')
        dropdown.add(defaultOption)
        responses.forEach((text,index)=>{
            option = new Option(text,index+1);
            dropdown.add(option);
        })
        dropdownSlot.prepend(dropdown)

        attemptcounter = document.getElementById('attemptcounter')
        attemptcounter.innerHTML = `Всего попыток тестирования: ${attcounter[0]}`

        dropdown.addEventListener('change', function (){
            const selectedIndex = dropdown.value;
            const changeData = choicesArray[selectedIndex]
            attemptcounter.innerHTML = `Всего попыток тестирования: ${attcounter[selectedIndex]}` 
            Plotly.react('altTester', changeData, layout,config);
            Plotly.moveTraces('altTester', 0);
        })

        basedata = datacreate(choicesArray[0])

        var config = {scrollZoom:true,responsive:true}
        Plotly.react('tester', basedata, layout,config);
        Plotly.moveTraces('tester', 0);
        var modal = document.getElementById('exampleModal')
        mydata = datacreate(choicesArray[0])
        modal.shown = function(event){
            Plotly.react('altTester', mydata, layout,config);
            Plotly.moveTraces('altTester', 0);
        }
    {{/js}}
</div>
